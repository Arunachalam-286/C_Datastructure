#include<stdio.h>
#include<stdlib.h>

struct Node {
    int data;
    struct Node *next;
}*head = NULL;

// Function to append elements to the linked list
void append(int val) {
    struct Node *newnode = (struct Node*)malloc(sizeof(struct Node));
    newnode->data = val;
    newnode->next = NULL;

    if(head == NULL) {
        head = newnode;
    } else {
        struct Node *temp = head;
        while(temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newnode;
    }
}

// Function to display the linked list
void display() {
    struct Node *temp = head;
    while(temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

// Function to split the linked list into two halves
struct Node* split(struct Node* head) {
    struct Node* slow = head;
    struct Node* fast = head;
    struct Node* prev = NULL;

    // Fast pointer moves 2 steps, slow moves 1 step
    while(fast != NULL && fast->next != NULL) {
        prev = slow;
        slow = slow->next;
        fast = fast->next->next;
    }
    
    if(prev != NULL) {
        prev->next = NULL;
    }
    return slow;
}

// Function to merge two sorted linked lists
struct Node* merge(struct Node* left, struct Node* right) {
    if(left == NULL) return right;
    if(right == NULL) return left;

    if(left->data < right->data) {
        left->next = merge(left->next, right);
        return left;
    } else {
        right->next = merge(left, right->next);
        return right;
    }
}

// Merge Sort function for linked list
struct Node* mergeSort(struct Node* head) {
    if(head == NULL || head->next == NULL) {
        return head; // Base case: if the list has 0 or 1 element
    }

    struct Node* mid = split(head); // Split the list
    struct Node* left = mergeSort(head); // Recursively sort the left half
    struct Node* right = mergeSort(mid); // Recursively sort the right half

    return merge(left, right); // Merge the sorted halves
}

int main() {
    int val;
    do {
        scanf("%d", &val);
        if(val != -1)
            append(val);
    } while(val != -1);
    
    printf("Before sorting:\n");
    display();

    // Perform merge sort on the linked list
    head = mergeSort(head);

    printf("After sorting:\n");
    display();

    return 0;
}
