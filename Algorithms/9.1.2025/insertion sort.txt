#include<stdio.h>
#include<stdlib.h>

// Node structure
struct Node
{
    int data;
    struct Node *next;
}*head = NULL;

// Function to append a value to the linked list
void append(int val)
{
    // 1. Create a memory for the node
    struct Node *newnode = (struct Node*)malloc(sizeof(struct Node));
    // 2. Initialize the node memory
    newnode->data = val;
    newnode->next = NULL;
    // 3. Connection
    // Check for first node connection (head to first node)
    if(head == NULL)
    {
        head = newnode;
    }
    // (lastnode to newnode connection)
    else
    {
        struct Node *temp = head;
        // To find last node
        while(temp->next != NULL)
        {
            temp = temp->next;
        }
        temp->next = newnode;
    }
}

// Function to display the linked list
void display()
{
    struct Node *temp = head;
    while(temp != NULL)
    {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

// Function to sort the linked list using insertion sort
void insertionSort()
{
    // If the list is empty or has one element, it's already sorted
    if (head == NULL || head->next == NULL)
        return;

    struct Node *sorted = NULL; // New sorted list
    struct Node *current = head;

    // Traverse the original list and insert each node into the sorted list
    while (current != NULL)
    {
        struct Node *nextNode = current->next; // Store the next node
        // Insert current node into the sorted list
        if (sorted == NULL || sorted->data >= current->data)
        {
            current->next = sorted;
            sorted = current;
        }
        else
        {
            struct Node *temp = sorted;
            // Find the correct position for the current node
            while (temp->next != NULL && temp->next->data < current->data)
            {
                temp = temp->next;
            }
            current->next = temp->next;
            temp->next = current;
        }
        current = nextNode;
    }

    head = sorted; // Update the head to the new sorted list
}

int main()
{
    int val;
    // Input values until -1 is encountered
    do
    {
        scanf("%d", &val);
        if(val != -1)
            append(val);
    } while(val != -1);

    printf("Original List: ");
    display();

    // Sort the linked list
    insertionSort();

    printf("Sorted List: ");
    display();

    return 0;
}
